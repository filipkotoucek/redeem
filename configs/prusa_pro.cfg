[System]
machine_type = Prusa_Pro


[Geometry]
axis_config = 0

offset_x = -0.19
offset_y = -0.19
offset_z = 0.0001

travel_y = 0.25
travel_x = -0.25


[Steppers]

microstepping_x = 256
microstepping_y = 256
microstepping_z = 256
microstepping_e = 256

current_x = 0.7
current_y = 0.7
current_z = 0.7
current_e = 1.5

# steps per mm:
#   Defined how many stepper full steps needed to move 1mm.
#   Do not factor in microstepping settings.
#   For example: If the axis will travel 10mm in one revolution and
#   angle per step in 1.8deg (200step/rev), steps_pr_mm is 20.
steps_pr_mm_x = 6.25
steps_pr_mm_y = 6.25
steps_pr_mm_z = 25.0
steps_pr_mm_e = 9.058

# Set to -1 if axis is inverted
direction_x =  1
direction_y =  1
direction_z =  -1
direction_e =  1

# Set to True if slow decay mode is needed. 
slow_decay_x = 0
slow_decay_y = 0
slow_decay_z = 0
slow_decay_e = 0

backlash_x = 0.0
backlash_y = 0.0
backlash_z = 0.0
backlash_e = 0.0

max_jerk_x = 0.01
max_jerk_y = 0.01
max_jerk_z = 0.0004
max_jerk_e = 0.0025

# Max speed for the steppers in m/s
max_speed_x = 0.2
max_speed_y = 0.2
max_speed_z = 0.012
max_speed_e = 0.12

acceleration_x = 1
acceleration_y = 1
acceleration_z = 0.2
acceleration_e = 5

# Which steppers are enabled
in_use_x = True
in_use_y = True
in_use_z = True
in_use_e = True
in_use_h = False
in_use_a = False
in_use_b = False
in_use_c = False

# A stepper controller can operate in slave mode,
# meaning that it will mirror the position of the
# specified stepper. Typically, H will mirror Y or Z,
# in the case of the former, write this: slave_y = H.
#slave_x =
#slave_y =  
                    
[[X-axis]]
axis		= X
step_pin	= GPIO3_14
dir_pin		= GPIO3_15
fault_pin	= GPIO2_4
spi_bus		= 1_0
spi_index	= 0

[[Y-axis]]
axis		= Y
step_pin	= GPIO3_16
dir_pin		= GPIO3_17
fault_pin	= GPIO2_5
spi_bus		= 1_0
spi_index	= 1

[[Z-axis]]
axis		= Z
step_pin	= GPIO3_18
dir_pin		= GPIO3_19
fault_pin	= GPIO0_15
spi_bus		= 1_0
spi_index	= 2

[[E-axis]]
axis		= E
step_pin	= GPIO1_12
dir_pin		= GPIO1_13
fault_pin	= GPIO2_1
spi_bus		= 1_0
spi_index	= 3


[Temperature Control]
[[M106/M107]]
type = gcode
command = M106, M107
output = Fan-1

[[Control-E]]
type = pid-control
input = Thermistor-E
target_value = 0.0
pid_Kp = 0.1
pid_Ti = 100.0
pid_Td = 0.3
ok_range = 4.0
max_value = 255
sleep = 0.5

[[Control-HBP]]
type = pid-control
input = Thermistor-HBP
target_value = 0.0
pid_Kp = 0.1
pid_Ti = 100.0
pid_Td = 0.3
ok_range = 4.0
max_value = 255
sleep = 0.5

[[Control-HE]]
type=on-off-control
input = Thermistor-E
target_value = 50
on_offset = 10
off_offset = 10
on_value = 200
off_value = 0
sleep = 0.5
output = Fan-0

[[Safety-E]]
type = safety
max_rise_rate = 10.0
max_fall_rate = 10.0
min_temp = 20.0
max_temp = 250.0
min_rise_rate = 0.1
min_rise_offset = 20
min_rise_delay = 10
input = Thermistor-E
heater = Heater-E

[[Safety-HBP]]
type = safety
max_rise_rate = 10.0
max_fall_rate = 10.0
min_temp = 20.0
max_temp = 250.0
min_rise_rate = 0.01
min_rise_offset = 20
min_rise_delay = 30
input = Thermistor-HBP
heater = Heater-HBP

[Thermistors]
# Thermistors for measuring temperature
# For list of available temp charts, look in temp_chart.py
[[Thermistor-E]]
sensor = SEMITEC-104GT-2
path_adc = /sys/bus/iio/devices/iio:device0/in_voltage4_raw

[[Thermistor-HBP]]
sensor = SEMITEC-104GT-2
path_adc = /sys/bus/iio/devices/iio:device0/in_voltage2_raw


[Fans]
# control the fans, hook them up to a temperature control unit or simply set
# a constant value. Note that 'channel' is modified on startup according to 
# your Replicape version.
[[Fan-0]]
type = fan
channel = 2:1
input = Control-HE
chip = AM335

[[Fan-1]]
type=fan
channel = 2:0
input = 0
chip = AM335

[Heaters]
# make things hot, can be connected to control units defined in [Temperature Control]
# can have multiple safety units assigned to one heater i.e. safety = Safety-1, Safety-2
[[Heater-E]]
type = heater
mosfet = 0:0
prefix = T0
input = Control-E
safety = Safety-E

[[Heater-HBP]]
type = heater
mosfet = 0:1
prefix = B
input = Control-HBP
safety = Safety-HBP


[Endstops]
# Which axis should be homed. 
has_x = True
has_y = True
has_z = True

# Invert =
#   True means endstop is connected as Normally Open (NO) or not connected
#   False means endstop is connected as Normally Closed (NC)
invert_X1 = True
invert_X2 = True
invert_Y1 = True
invert_Y2 = True
invert_Z1 = True
invert_Z2 = True

#[Servos]
#servo_0_enable = False
#servo_0_channel = 14
#servo_0_angle_on = -60
#servo_0_angle_off = 320

#[Planner]
#max_speed_z = 0.003

[Homing]
home_x = 0
home_y = 0
home_z = 0